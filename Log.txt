
React => Views ( React)

remaining aspects are handled by third party libraries or integrations


SSR=> Server side rendering 
(
    payload + html+js+css(page)
     SSR=> render the payload on the page before returning the page for a given route

(Django)
     /exclusiveProductDetails/prod1 
     (SSR adds security and doesnt expose vulnerable parts of
     the codebase to the browser/client)


)


Component =>
1) the business logic of what the view will handled
2) What it will show, returned as html (jsx,tsx)


Hook=> convenience function/wrapper in React for certain key aspects
of rendering, variable management. 


1) Component hierarchy

a) Have one main component which contains the layout elements as child components 
b) Use percentage based responsive layout for ensuring consistent and beautiful
rendering across all device sizes 


2) Variable management within a component  =>useState


//props , we want the rendering behaviour or the business logic for a 
//component to change based on the parent component
  //prop drilling

3) Variable management between components
//have one parent component or use parent components to specify property values/props for
affecting the child component behaviour 


//Debate:
unless u have a lot of variables being shared across components in an application,
dont use redux or context api 
use prop drilling + binding change handlers + usestate  ( this works with natural flow of react )

Flux architecture:

 sockets => unix 

 event emitters=> nodejs
 Signals
 RxJS

   whenever variable changes in any component , dispatch the change to a central store 
   a store is an object containing properties which are functions called reducers

   obj.propertyName 
   obj.numberofProducts = [(),()] {reducer}
   [type=>reducer[(),()]]
   for every type of dispatch,there are separate properties in the store called reducers 
   a reducer can in turn have multiple functions =>actions 

   //components which subscribe to that change will get affected 


//cartCount => separate reducer 

//reducer => 
//if( theSameProductHasNotBeenClicked)
{
cartCount= cartCount+1
}

   the central store will initiate a reducer
   
    reducer will execute the  assigned function/action based on the dispatched change type 



//react will force a rerender on the component every time a state variable changes

maintain all the variables in the main component as statevariables
bind the change handlers from the main component to the child component through props 
this will allow us to share variables between the main component and all the child components

localStorage => setState in combination with localStorage ( not advisable as a security practice )


Context: Store/reference which provides information to the children components ( Provider of information)
Provider=>
   Consumers within the Provider can access the information (Consumer in your component )


Store
All data in Redux is managed in stores that manage the global state.
 Theoretically, applications could have many different stores. 
 Flux architecture even encourages the use of multiple stores.
  However, in most React applications using Redux, we’ll only find a single store.
   This reduces complexity dramatically and also declares this single store as the single source of truth (SSOT)
    for all of our data. The store also provides some methods that can be used to change (dispatch) the data currently 
    stored in the store, read (getState) the data from the store, 
and react to changes (subscribe).


Redux:
The only way to change data in a store is to “dispatch” an action.  
Redux has taken its inspiration from Flux architecture and requires that these 
actions be in Flux Standard Action (FSA) format. FSAs consist of a simple JavaScript object which always must have a type property 
and can contain payload, meta, and error properties. We are going to focus mostly on the payload.

//reflection type of the class, variables it has, functions it has 
//js/ts : typeof 
type: (metadata)
payload 

stock market application 
dispatch a ticker update 
ticker=> stock price has changed from 150rs to 145rs 


//updated every 15secs  
type:"ticker"
{
  stockName:"BroForge"
  priceBefore:150
  priceAfter:145
  timeOfReport:"02-04-2024 2:55PM"

}

which view should subscribe to this update in a stock market application 
dashboard where the stock prices are actively updated 

stock prices 
stock market application 
cricket application where live scores are shown 




Once an action has been dispatched (the store provides this dispatch method for us), the current state as well as the action dispatched are passed to the reducer. 

which acts as the interface between the store of information in redux and the views 

The reducer is a pure function in React. 

Its primary aim is to create a new state based on the current state and the action’s type and payload properties. Remember that a pure function always creates the same output, given the same input parameters, no matter how many times it is called. This behavior makes reducers predictable and easy to test.


Reducers
Once an action has been dispatched (the store provides this dispatch method for us), the current state as well as the action dispatched are passed to the reducer. The reducer is a pure function in React. Its primary aim is to create a new state based on the current state and the action’s type and payload properties. Remember that a pure function always creates the same output, given the same input parameters, no matter how many times it is called. This behavior makes reducers predictable and easy to test.

Below is an example of a reducer:


//2
//3

plus=>state=2+3
minus=>state=2-3
palus 
unhandled action type 

const reducer = (state, action) => {
  switch (action.type) {
    case 'PLUS': {
      return state + action.payload;
    }
    case 'MINUS': {
      return state - action.payload;
    }
    default: {
      return 0;
    }
  }
};
A store generally expects only a single reducer.
 Redux allows us to split the reducer function into many small parts, making them more digestible and easy to read.
  A combineReducers() function then takes care of merging all these parts into one main reducer:
   the root reducer. When an action is dispatched, each reducer is called with the same parameters: state and the action.

Each reducer reacts to the type property of an action. Due to this, convention is to extract all used types into variables with the same name,
 which allows us to avoid typos. Why is that? 
 Typos can be difficult to spot (for example, USER_ADDDED) when using many different variables. 
 In addition, the JavaScript interpreter will throw an error if we try to access a variable that is not defined, 
 eliminating another error we’d have to track down. 
 So, we’ll often find the following code blocks at the beginning of a file in Redux applications:

const PLUS = 'PLUS';
const MINUS = 'MINUS';

//we can handle reducers logic in both sync and async way 
//when we want to use sync,use reducers 
//when we want to use in the async way , use "@reduxjs/toolkit" middleware,
//so, for time consuming operations (network or high computation), it is better to use async methods 

    


s is the action type string in this case. Whenever this function is dispatched from a component within our application, createAsyncThunk generates promise lifecycle action types using this string as a prefix:

pending: posts/getPosts/pending
fulfilled: posts/getPosts/fulfilled
rejected: posts/getPosts/rejected
On its initial call, createAsyncThunk dispatches the posts/getPosts/pending lifecycle action type. The payloadCreator then executes to return either a result or an error.

In the event of an error, posts/getPosts/rejected is dispatched and createAsyncThunk should either return a rejected promise containing an Error instance, a plain descriptive message, or a resolved promise with a RejectWithValue argument as returned by the thunkAPI.rejectWithValue function (more on thunkAPI and error handling momentarily).

If our data fetch is successful, the posts/getPosts/fulfilled action type gets dispatched


const initialState = 0;

const counterReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'PLUS': {
      return state + (action.payload || 0);
    }
    case 'MINUS': {
      return state - (action.payload || 0);
    }
    default: {
      return state;
    }
  }
};

const store = createStore(counterReducer);



we want the component state to change regardless of being viewed or not 

asynchronous data management 

the useCallback hook is primarily concerned with optimizing the performance of your components by memoizing callback functions. In React, when a component re-renders, its child components also re-render. If these child components receive callback functions as props, they might trigger unnecessary re-renders if those callback functions are recreated in every render cycle.


Virtual DOM
toBeRendered Tree 
currentlyRendered Tree 
it renders only differences on the physical dom  based on child elements and keys to improve browser performance

if the child component is destroyed or recreated, then the entire child hierarchy of that child component is also destroyed or recreated 
 


Memoization //Caching 
Python LRU Cache =>memoization 

useCallback=> very similar to useMemo 

<<<<<<< HEAD
Writing integration tests
Writing integration tests is actually pretty simple. You should just read off the acceptance criteria (or any English description of the feature), and translate it into JavaScript. To do this, you will need to know a few Selenium functions:
=======
difference is 
resRef=useMemo=> {fn, []}
>>>>>>> 6838f92e4fc608211131510d9d50cc4740adf84b

<<<<<<< HEAD
driver.get(url): Open a webpage.
driver.wait(condition, timeout): Wait for something. It’s typically used to wait for elements while the page is loading.
driver.findElement/driver.findElements: Find elements on a webpage.
=======
funcRef= useCallback {()=>{fn()},[]}  
useRef => refer to an element in the dom
>>>>>>> 6838f92e4fc608211131510d9d50cc4740adf84b

useState 

And a few helper functions:

<<<<<<< HEAD
By: This function is used as an argument to find elements. For example:
By.id("textInput")
By.className("wrapper")
By.xpath("//input")
driver.findElement(By.tag("div"))
until: - This function is used as an argument for the wait function. For example:
until.elementLocated(By.id("submitBtn"))
until.titleContains("abacaba")
wait(until.elementLocated(By.name("wrapper")), 1000)



const greeting = guest => `Hello, ＄{guest}!`;

describe('greeting()', () => { // 1
  it('says hello', () => { // 2
    expect(greeting('Jest')).toBe('Hello, Jest!'); // 3
  });





=======
useMemo=> way of caching expensive results which are repeatedly used in the application 
useCallback for caching the function rather than the result 

React's biggest advantage=> Simplicity 

//component based testing 
1) is the text being rendered as expected 
2) are the css styles being rendered as expected 
3) are the child components being rendered as expected 





// api based testing 



//RTL  =?
//Jest => javascript ecosystem framework agnostic testing library 
Jest is highly recommended 
mern mean => frontend and backend 

  jest => frontend testing and api unit testing 

jsdom => browser dom emulation library 

  jest can simulate the browser dom even in nodejs  environment 
   
   //SSR => server side rendering  (component logic, api logic )
//pros=>privacy, security, seo , browser sees only html-js-css 
//cons=> more talking to the server meaning more bandwidth consumption , reduced traffic possibility

//react => aws  s3+ cloudfront+ waf(DDOS,MIM) , azure blob storage+ frontdoor + azure cdn, (we dont typically do this as frequently on gcp ) 


  e2e => cypress or selenium  

 // TDD is not the first thing which comes to mind 
 //write code based on how u will test it 
 //write tests before u write code 


only synthetic events are avaiable to react components and the elements defined in the components 
they are nothing but wrappers on dom elements 
but they are fired by the react virtual DOM algorithm based on conditions 
react converts synthetic events into platform specific events 

ie 
firefox 
chrome 
safari 

react 18 has batching of events 


npm install msw@latest --save-dev 
npx msw init public 